// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Dbtcloud
{
    [DbtcloudResourceType("dbtcloud:index/repository:Repository")]
    public partial class Repository : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Public key generated by DBT when using `deploy_key` clone strategy
        /// </summary>
        [Output("deployKey")]
        public Output<string> DeployKey { get; private set; } = null!;

        /// <summary>
        /// Whether we should return the public deploy key
        /// </summary>
        [Output("fetchDeployKey")]
        public Output<bool?> FetchDeployKey { get; private set; } = null!;

        /// <summary>
        /// Git clone strategy for the repository
        /// </summary>
        [Output("gitCloneStrategy")]
        public Output<string?> GitCloneStrategy { get; private set; } = null!;

        /// <summary>
        /// Identifier for the Gitlab project
        /// </summary>
        [Output("gitlabProjectId")]
        public Output<int?> GitlabProjectId { get; private set; } = null!;

        /// <summary>
        /// Whether the repository is active
        /// </summary>
        [Output("isActive")]
        public Output<bool?> IsActive { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the repository in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
        /// </summary>
        [Output("remoteUrl")]
        public Output<string> RemoteUrl { get; private set; } = null!;

        /// <summary>
        /// Credentials ID for the repository (From the repository side not the DBT Cloud ID)
        /// </summary>
        [Output("repositoryCredentialsId")]
        public Output<int?> RepositoryCredentialsId { get; private set; } = null!;

        /// <summary>
        /// Repository Identifier
        /// </summary>
        [Output("repositoryId")]
        public Output<int> RepositoryId { get; private set; } = null!;


        /// <summary>
        /// Create a Repository resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Repository(string name, RepositoryArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/repository:Repository", name, args ?? new RepositoryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Repository(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/repository:Repository", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Repository resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Repository Get(string name, Input<string> id, RepositoryState? state = null, CustomResourceOptions? options = null)
        {
            return new Repository(name, id, state, options);
        }
    }

    public sealed class RepositoryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether we should return the public deploy key
        /// </summary>
        [Input("fetchDeployKey")]
        public Input<bool>? FetchDeployKey { get; set; }

        /// <summary>
        /// Git clone strategy for the repository
        /// </summary>
        [Input("gitCloneStrategy")]
        public Input<string>? GitCloneStrategy { get; set; }

        /// <summary>
        /// Identifier for the Gitlab project
        /// </summary>
        [Input("gitlabProjectId")]
        public Input<int>? GitlabProjectId { get; set; }

        /// <summary>
        /// Whether the repository is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Project ID to create the repository in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
        /// </summary>
        [Input("remoteUrl", required: true)]
        public Input<string> RemoteUrl { get; set; } = null!;

        /// <summary>
        /// Credentials ID for the repository (From the repository side not the DBT Cloud ID)
        /// </summary>
        [Input("repositoryCredentialsId")]
        public Input<int>? RepositoryCredentialsId { get; set; }

        public RepositoryArgs()
        {
        }
        public static new RepositoryArgs Empty => new RepositoryArgs();
    }

    public sealed class RepositoryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Public key generated by DBT when using `deploy_key` clone strategy
        /// </summary>
        [Input("deployKey")]
        public Input<string>? DeployKey { get; set; }

        /// <summary>
        /// Whether we should return the public deploy key
        /// </summary>
        [Input("fetchDeployKey")]
        public Input<bool>? FetchDeployKey { get; set; }

        /// <summary>
        /// Git clone strategy for the repository
        /// </summary>
        [Input("gitCloneStrategy")]
        public Input<string>? GitCloneStrategy { get; set; }

        /// <summary>
        /// Identifier for the Gitlab project
        /// </summary>
        [Input("gitlabProjectId")]
        public Input<int>? GitlabProjectId { get; set; }

        /// <summary>
        /// Whether the repository is active
        /// </summary>
        [Input("isActive")]
        public Input<bool>? IsActive { get; set; }

        /// <summary>
        /// Project ID to create the repository in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Git URL for the repository or &lt;Group&gt;/&lt;Project&gt; for Gitlab
        /// </summary>
        [Input("remoteUrl")]
        public Input<string>? RemoteUrl { get; set; }

        /// <summary>
        /// Credentials ID for the repository (From the repository side not the DBT Cloud ID)
        /// </summary>
        [Input("repositoryCredentialsId")]
        public Input<int>? RepositoryCredentialsId { get; set; }

        /// <summary>
        /// Repository Identifier
        /// </summary>
        [Input("repositoryId")]
        public Input<int>? RepositoryId { get; set; }

        public RepositoryState()
        {
        }
        public static new RepositoryState Empty => new RepositoryState();
    }
}
