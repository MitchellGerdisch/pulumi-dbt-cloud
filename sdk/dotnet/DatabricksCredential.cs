// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Dbtcloud
{
    [DbtcloudResourceType("dbtcloud:index/databricksCredential:DatabricksCredential")]
    public partial class DatabricksCredential : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Output("adapterId")]
        public Output<int> AdapterId { get; private set; } = null!;

        /// <summary>
        /// The system Databricks credential ID
        /// </summary>
        [Output("credentialId")]
        public Output<int> CredentialId { get; private set; } = null!;

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Output("numThreads")]
        public Output<int> NumThreads { get; private set; } = null!;

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Output("projectId")]
        public Output<int> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Target name
        /// </summary>
        [Output("targetName")]
        public Output<string> TargetName { get; private set; } = null!;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;


        /// <summary>
        /// Create a DatabricksCredential resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabricksCredential(string name, DatabricksCredentialArgs args, CustomResourceOptions? options = null)
            : base("dbtcloud:index/databricksCredential:DatabricksCredential", name, args ?? new DatabricksCredentialArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabricksCredential(string name, Input<string> id, DatabricksCredentialState? state = null, CustomResourceOptions? options = null)
            : base("dbtcloud:index/databricksCredential:DatabricksCredential", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabricksCredential resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabricksCredential Get(string name, Input<string> id, DatabricksCredentialState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabricksCredential(name, id, state, options);
        }
    }

    public sealed class DatabricksCredentialArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Input("adapterId", required: true)]
        public Input<int> AdapterId { get; set; } = null!;

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Input("numThreads", required: true)]
        public Input<int> NumThreads { get; set; } = null!;

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Input("projectId", required: true)]
        public Input<int> ProjectId { get; set; } = null!;

        /// <summary>
        /// Target name
        /// </summary>
        [Input("targetName", required: true)]
        public Input<string> TargetName { get; set; } = null!;

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        public DatabricksCredentialArgs()
        {
        }
        public static new DatabricksCredentialArgs Empty => new DatabricksCredentialArgs();
    }

    public sealed class DatabricksCredentialState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Databricks adapter ID for the credential
        /// </summary>
        [Input("adapterId")]
        public Input<int>? AdapterId { get; set; }

        /// <summary>
        /// The system Databricks credential ID
        /// </summary>
        [Input("credentialId")]
        public Input<int>? CredentialId { get; set; }

        /// <summary>
        /// Number of threads to use
        /// </summary>
        [Input("numThreads")]
        public Input<int>? NumThreads { get; set; }

        /// <summary>
        /// Project ID to create the Databricks credential in
        /// </summary>
        [Input("projectId")]
        public Input<int>? ProjectId { get; set; }

        /// <summary>
        /// Target name
        /// </summary>
        [Input("targetName")]
        public Input<string>? TargetName { get; set; }

        /// <summary>
        /// Token for Databricks user
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        public DatabricksCredentialState()
        {
        }
        public static new DatabricksCredentialState Empty => new DatabricksCredentialState();
    }
}
