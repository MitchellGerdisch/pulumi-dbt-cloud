// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dbtcloud

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupRepository(ctx *pulumi.Context, args *LookupRepositoryArgs, opts ...pulumi.InvokeOption) (*LookupRepositoryResult, error) {
	var rv LookupRepositoryResult
	err := ctx.Invoke("dbtcloud:index/getRepository:getRepository", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryArgs struct {
	FetchDeployKey *bool `pulumi:"fetchDeployKey"`
	ProjectId      int   `pulumi:"projectId"`
	RepositoryId   int   `pulumi:"repositoryId"`
}

// A collection of values returned by getRepository.
type LookupRepositoryResult struct {
	DeployKey        string `pulumi:"deployKey"`
	FetchDeployKey   *bool  `pulumi:"fetchDeployKey"`
	GitCloneStrategy string `pulumi:"gitCloneStrategy"`
	GitlabProjectId  int    `pulumi:"gitlabProjectId"`
	// The provider-assigned unique ID for this managed resource.
	Id                      string `pulumi:"id"`
	IsActive                bool   `pulumi:"isActive"`
	ProjectId               int    `pulumi:"projectId"`
	RemoteUrl               string `pulumi:"remoteUrl"`
	RepositoryCredentialsId int    `pulumi:"repositoryCredentialsId"`
	RepositoryId            int    `pulumi:"repositoryId"`
}

func LookupRepositoryOutput(ctx *pulumi.Context, args LookupRepositoryOutputArgs, opts ...pulumi.InvokeOption) LookupRepositoryResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRepositoryResult, error) {
			args := v.(LookupRepositoryArgs)
			r, err := LookupRepository(ctx, &args, opts...)
			var s LookupRepositoryResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRepositoryResultOutput)
}

// A collection of arguments for invoking getRepository.
type LookupRepositoryOutputArgs struct {
	FetchDeployKey pulumi.BoolPtrInput `pulumi:"fetchDeployKey"`
	ProjectId      pulumi.IntInput     `pulumi:"projectId"`
	RepositoryId   pulumi.IntInput     `pulumi:"repositoryId"`
}

func (LookupRepositoryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryArgs)(nil)).Elem()
}

// A collection of values returned by getRepository.
type LookupRepositoryResultOutput struct{ *pulumi.OutputState }

func (LookupRepositoryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRepositoryResult)(nil)).Elem()
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutput() LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) ToLookupRepositoryResultOutputWithContext(ctx context.Context) LookupRepositoryResultOutput {
	return o
}

func (o LookupRepositoryResultOutput) DeployKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.DeployKey }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) FetchDeployKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupRepositoryResult) *bool { return v.FetchDeployKey }).(pulumi.BoolPtrOutput)
}

func (o LookupRepositoryResultOutput) GitCloneStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.GitCloneStrategy }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) GitlabProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.GitlabProjectId }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRepositoryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) IsActive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRepositoryResult) bool { return v.IsActive }).(pulumi.BoolOutput)
}

func (o LookupRepositoryResultOutput) ProjectId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.ProjectId }).(pulumi.IntOutput)
}

func (o LookupRepositoryResultOutput) RemoteUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRepositoryResult) string { return v.RemoteUrl }).(pulumi.StringOutput)
}

func (o LookupRepositoryResultOutput) RepositoryCredentialsId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.RepositoryCredentialsId }).(pulumi.IntOutput)
}

func (o LookupRepositoryResultOutput) RepositoryId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRepositoryResult) int { return v.RepositoryId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRepositoryResultOutput{})
}
