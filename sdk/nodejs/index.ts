// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./connection";
export * from "./databricksCredential";
export * from "./environment";
export * from "./environmentVariable";
export * from "./getConnection";
export * from "./getEnvironment";
export * from "./getEnvironmentVariable";
export * from "./getGroup";
export * from "./getJob";
export * from "./getProject";
export * from "./getRepository";
export * from "./getSnowflakeCredential";
export * from "./getUser";
export * from "./group";
export * from "./job";
export * from "./project";
export * from "./projectConnection";
export * from "./projectRepository";
export * from "./provider";
export * from "./repository";
export * from "./snowflakeCredential";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { Connection } from "./connection";
import { DatabricksCredential } from "./databricksCredential";
import { Environment } from "./environment";
import { EnvironmentVariable } from "./environmentVariable";
import { Group } from "./group";
import { Job } from "./job";
import { Project } from "./project";
import { ProjectConnection } from "./projectConnection";
import { ProjectRepository } from "./projectRepository";
import { Repository } from "./repository";
import { SnowflakeCredential } from "./snowflakeCredential";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "dbtcloud:index/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "dbtcloud:index/databricksCredential:DatabricksCredential":
                return new DatabricksCredential(name, <any>undefined, { urn })
            case "dbtcloud:index/environment:Environment":
                return new Environment(name, <any>undefined, { urn })
            case "dbtcloud:index/environmentVariable:EnvironmentVariable":
                return new EnvironmentVariable(name, <any>undefined, { urn })
            case "dbtcloud:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "dbtcloud:index/job:Job":
                return new Job(name, <any>undefined, { urn })
            case "dbtcloud:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "dbtcloud:index/projectConnection:ProjectConnection":
                return new ProjectConnection(name, <any>undefined, { urn })
            case "dbtcloud:index/projectRepository:ProjectRepository":
                return new ProjectRepository(name, <any>undefined, { urn })
            case "dbtcloud:index/repository:Repository":
                return new Repository(name, <any>undefined, { urn })
            case "dbtcloud:index/snowflakeCredential:SnowflakeCredential":
                return new SnowflakeCredential(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("dbtcloud", "index/connection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/databricksCredential", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environment", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/environmentVariable", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/group", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/job", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/project", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectConnection", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/projectRepository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/repository", _module)
pulumi.runtime.registerResourceModule("dbtcloud", "index/snowflakeCredential", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("dbtcloud", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:dbtcloud") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
