// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getRepository(args: GetRepositoryArgs, opts?: pulumi.InvokeOptions): Promise<GetRepositoryResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("dbtcloud:index/getRepository:getRepository", {
        "fetchDeployKey": args.fetchDeployKey,
        "projectId": args.projectId,
        "repositoryId": args.repositoryId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryArgs {
    fetchDeployKey?: boolean;
    projectId: number;
    repositoryId: number;
}

/**
 * A collection of values returned by getRepository.
 */
export interface GetRepositoryResult {
    readonly deployKey: string;
    readonly fetchDeployKey?: boolean;
    readonly gitCloneStrategy: string;
    readonly gitlabProjectId: number;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isActive: boolean;
    readonly projectId: number;
    readonly remoteUrl: string;
    readonly repositoryCredentialsId: number;
    readonly repositoryId: number;
}

export function getRepositoryOutput(args: GetRepositoryOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRepositoryResult> {
    return pulumi.output(args).apply(a => getRepository(a, opts))
}

/**
 * A collection of arguments for invoking getRepository.
 */
export interface GetRepositoryOutputArgs {
    fetchDeployKey?: pulumi.Input<boolean>;
    projectId: pulumi.Input<number>;
    repositoryId: pulumi.Input<number>;
}
