// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'dbtcloud:index/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * Public key generated by DBT when using `deploy_key` clone strategy
     */
    public /*out*/ readonly deployKey!: pulumi.Output<string>;
    /**
     * Whether we should return the public deploy key
     */
    public readonly fetchDeployKey!: pulumi.Output<boolean | undefined>;
    /**
     * Git clone strategy for the repository
     */
    public readonly gitCloneStrategy!: pulumi.Output<string | undefined>;
    /**
     * Identifier for the Gitlab project
     */
    public readonly gitlabProjectId!: pulumi.Output<number | undefined>;
    /**
     * Whether the repository is active
     */
    public readonly isActive!: pulumi.Output<boolean | undefined>;
    /**
     * Project ID to create the repository in
     */
    public readonly projectId!: pulumi.Output<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    public readonly remoteUrl!: pulumi.Output<string>;
    /**
     * Credentials ID for the repository (From the repository side not the DBT Cloud ID)
     */
    public readonly repositoryCredentialsId!: pulumi.Output<number | undefined>;
    /**
     * Repository Identifier
     */
    public /*out*/ readonly repositoryId!: pulumi.Output<number>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["deployKey"] = state ? state.deployKey : undefined;
            resourceInputs["fetchDeployKey"] = state ? state.fetchDeployKey : undefined;
            resourceInputs["gitCloneStrategy"] = state ? state.gitCloneStrategy : undefined;
            resourceInputs["gitlabProjectId"] = state ? state.gitlabProjectId : undefined;
            resourceInputs["isActive"] = state ? state.isActive : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["remoteUrl"] = state ? state.remoteUrl : undefined;
            resourceInputs["repositoryCredentialsId"] = state ? state.repositoryCredentialsId : undefined;
            resourceInputs["repositoryId"] = state ? state.repositoryId : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.remoteUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'remoteUrl'");
            }
            resourceInputs["fetchDeployKey"] = args ? args.fetchDeployKey : undefined;
            resourceInputs["gitCloneStrategy"] = args ? args.gitCloneStrategy : undefined;
            resourceInputs["gitlabProjectId"] = args ? args.gitlabProjectId : undefined;
            resourceInputs["isActive"] = args ? args.isActive : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["remoteUrl"] = args ? args.remoteUrl : undefined;
            resourceInputs["repositoryCredentialsId"] = args ? args.repositoryCredentialsId : undefined;
            resourceInputs["deployKey"] = undefined /*out*/;
            resourceInputs["repositoryId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * Public key generated by DBT when using `deploy_key` clone strategy
     */
    deployKey?: pulumi.Input<string>;
    /**
     * Whether we should return the public deploy key
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the Gitlab project
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId?: pulumi.Input<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl?: pulumi.Input<string>;
    /**
     * Credentials ID for the repository (From the repository side not the DBT Cloud ID)
     */
    repositoryCredentialsId?: pulumi.Input<number>;
    /**
     * Repository Identifier
     */
    repositoryId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * Whether we should return the public deploy key
     */
    fetchDeployKey?: pulumi.Input<boolean>;
    /**
     * Git clone strategy for the repository
     */
    gitCloneStrategy?: pulumi.Input<string>;
    /**
     * Identifier for the Gitlab project
     */
    gitlabProjectId?: pulumi.Input<number>;
    /**
     * Whether the repository is active
     */
    isActive?: pulumi.Input<boolean>;
    /**
     * Project ID to create the repository in
     */
    projectId: pulumi.Input<number>;
    /**
     * Git URL for the repository or <Group>/<Project> for Gitlab
     */
    remoteUrl: pulumi.Input<string>;
    /**
     * Credentials ID for the repository (From the repository side not the DBT Cloud ID)
     */
    repositoryCredentialsId?: pulumi.Input<number>;
}
